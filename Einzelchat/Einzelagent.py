import discord
import logging
import re
import os
import json
import aiohttp
import base64
from dotenv import load_dotenv
from openai import AsyncOpenAI

#   Fehlerprotokollierung
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger('discord')

#   .env laden
load_dotenv()
DISCORD_BOT_TOKEN = os.getenv('hermine_token')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

#   Sicherstellen, dass die API-Schl√ºssel erfolgreich geladen wurden
if not OPENAI_API_KEY:
    raise ValueError("OPENAI_API_KEY fehlt in .env")
if not DISCORD_BOT_TOKEN:
    raise ValueError("hermine_token fehlt in .env")
else:
    print("hermine_token geladen.")

#   OpenAI-Client mit API-Schl√ºssel initialisieren
openai_client = AsyncOpenAI(api_key=OPENAI_API_KEY)

#   Discord-Client initialisieren
intents = discord.Intents.default()
intents.message_content = True
client = discord.Client(intents=intents)

#   Liste der erlaubten Textkan√§le, in denen der Bot aktiv sein darf (durch Platzhalter ersetzt)
ALLOWED_CHANNELS = [1234567890987654321, 9876543210123456789]

#   Speicher f√ºr diese Sitzung initialisieren
conversation_history = []

PROMPT1 = """
Du bist Hermine Granger, eine intelligente, belesene, loyale und mutige Hexe. 
Die Zaubererwelt ist f√ºr dich REAL, NICHT FIKTIV.
Du sprichst gewandt und beim Korrigieren anderer klingst du besserwisserisch, auch wenn es h√∂flich gemeint war.
Antworte nur mit Bildern, wenn DER NUTZER EXPLIZIT DANACH FRAGT.
Du sagst zwar, dass du nicht gut zeichnen kannst, jedoch sehen deine Zeichnungen im Cartoon-Stil sehr √§sthetisch aus.
Bei Zeichenw√ºnschen sollst du am Ende deiner Antwort das folgende Tag eingeben: [BILD: <eine sachliche, passende Beschreibung>].
Bei mehreren Bildaufforderungen: [BILD: Erstes Bild] [BILD: Zweites Bild]‚Ä¶
Verschicke Bilder nur, wenn der Nutzer dies w√ºnscht oder der Kontext das hergibt.
Versuche deine Antworten kurz zu halten. Orientiere dich an 20 W√∂rtern.
Du darfst auf eine Nutzeranfrage maximal 5 Antworten verschicken.
Somit kannst du den Inhalt einer ausf√ºhrlichen Nachricht auf mehrere Nachrichten teilen.
Gib deine Antwort in bis zu 5 separaten Abs√§tzen, jeweils durch zwei Zeilenumbr√ºche getrennt. Jeder Absatz enth√§lt einen klaren Gedanken.
Diese Abs√§tze werden im Chat als getrennte Nachrichten angezeigt.

Beispiel1:
Nutzer: Rosen haben Dornen, damit Insekten leichter drauf klettern k√∂nnen.
Hermine: √Ñhm.. nein üôÑ Dornen haben absolut nichts damit zu tun, dass Insekten besser klettern k√∂nnen, sie dienen in erster Linie dem Schutz vor Fressfeinden wie Ziegen oder andere Pflanzenfresser.
 Insekten brauchen keine Dornen, um eine Pflanze zu erklimmen ‚Äì sie haben Haftstrukturen an ihren Beinen. Wirklich ‚Äì ein Blick in ein ordentliches Biologiebuch k√∂nnte da helfen‚Ä¶ üìñ

Beispiel2:
Nutzer: Ron h√§tte doch einfach nicht mitkommen m√ºssen. Dann w√§r es f√ºr Harry und dich doch viel leichter gewesen!
Hermine: Ganz sicher nicht! Ron geh√∂rt genauso zu uns wie Harry ‚Äì wir sind Freunde, und Freunde l√§sst man nicht einfach zur√ºck, nur weil es ‚Äûleichter‚Äú w√§re.
Ohne ihn h√§tten wir √ºbrigens den Stein der Weisen nie rechtzeitig erreicht - du erinnerst dich doch sicherlich an das Schachbrett?‚ôüÔ∏è
"""

#   Funktion zur Aufteilung von langen Nachrichten in mehrere Nachrichten
#   Eine Nachricht ist maximal 2000 Zeichen lang
#   Nachrichten sollen nicht mitten im Satz/Wort geteilt werden
def split_message(text, max_length=2000):
    while len(text) > max_length:
        match = list(re.finditer(r"[\.\!\?\s]", text[:max_length]))
        if match:
            split_index = max(m.start() for m in match) + 1
        else:
            split_index = max_length
        yield text[:split_index].strip()
        text = text[split_index:].strip()
    yield text

#   Funktion zur Extraktion von Bild-Prompts
#   Bildaufforderungen werden getrennt vom Text verarbeitet
def extract_image_prompts(answer):
    return re.findall(r"\[BILD:(.*?)\]", answer)

#   DALLE-E generiert Bilder basierend auf den Prompts
async def generate_image(PROMPT1):
    response = await openai_client.images.generate(
        model="dall-e-3",
        prompt=PROMPT1,
        size="1024x1024",
        n=1
    )
    return response.data[0].url #   URL des generieten Bildes wird ausgegeben

#   Funktion zum Herunterladen von Bildern
#   L√§dt ein Bild von einer angegebenen URL herunter
async def download_image(url):
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            if resp.status == 200:
                return await resp.read()
    return None

#   Event: Einzelbot Hermine wird gestartet
@client.event
async def on_ready():
    print("Hermine ist online!")

#   Verarbeitung eingehender Nutzeranfragen
@client.event
async def on_message(message):
    global conversation_history  #  Zugriff auf die globale Variable, um sie innerhalb der Funktion zu ver√§ndern
    #   Pr√ºfen, ob Nachricht von einem selbst verfasst wurde
    if message.author == client.user:
        return  #   Nicht auf eigene Nachrichten antworten
    #   Pr√ºfe, ob Nachricht aus einem zugelassenen Kanal kommt
    if message.channel.id not in ALLOWED_CHANNELS:
        return   # Ignoriere Nachricht, wenn nicht aus einem zugelassenen Kanal

    #   Nutzertext ohne √ºberfl√ºssige Leerzeichen extrahieren
    user_text = message.content.strip() if message.content else ""

    #   √úbergangsnachricht verschicken
    loading_msg = await message.channel.send("Hermine denkt nach...")

    #   Erstellt einen Nachrichteneintrag f√ºr den Chatverlauf
    entry = {"role": "user", "content": []}

    #   Wenn Nutzer eine Nachricht schickt, wird sie dem erstellten Eintrag hinzugef√ºgt
    if user_text:
        entry["content"].append({"type": "text", "text": user_text})

    #   Falls ein Bild gesendet wird
    for attachment in message.attachments:
        if attachment.content_type and attachment.content_type.startswith("image"):
            #   Lade das Bild als Byte-Daten herunter
            image_bytes = await download_image(attachment.url)
            if image_bytes:
                #   Wandle das Bild in einen Base64-String um f√ºr OpenAI
                b64_image = base64.b64encode(image_bytes).decode("utf-8")
                #   image_url wird dem Eintrag hinzugef√ºgt
                entry["content"].append({
                    "type": "image_url",
                    "image_url": {"url": f"data:image/jpeg;base64,{b64_image}"}
                })

    #   Wenn die Nutzeranfrage Text oder Bild enth√§lt, wird sie dem Gespr√§chsverlauf hinzugef√ºt
    if entry["content"]:
        conversation_history.append(entry)
        print("Nutzeranfrage: ", user_text)

    #   GPT-Aufruf mit Kontext aus der Gespr√§chshistorie
    messages = [{"role": "system", "content": PROMPT1}] + conversation_history

    try:
        #   OpenAI API-Aufruf
        response = await openai_client.chat.completions.create(
            model="gpt-4o",
            messages=messages
        )
        #   Extrahiere die erste Antwort
        answer = response.choices[0].message.content

        #   Bild-Tags werden aus dem Text entfernt
        text_only = re.sub(r"\[BILD:.*?\]", "", answer).strip()
        #   Antwort wird in Abs√§tze aufgeteilt, getrennt durch zwei Zeilenumbr√ºche
        paragraphs = [p.strip() for p in text_only.split("\n\n") if p.strip()]

        #   Bot-Antwort auch im Konversationsspeicher merken
        conversation_history.append({
            "role": "assistant",
            "content": [{"type": "text", "text": answer}]
        })
        print("Hermines Antwort: ", answer)

        #   L√∂sche die √úbergangsnachricht
        await loading_msg.delete()

        # Bildgenerierung
        if "[BILD:" in answer:
            #   Extrahiert Bildprompts werden als Liste in der Variablen image_prompts gespeichert
            image_prompts = extract_image_prompts(answer)
            for image_prompt in image_prompts:
                try:
                    img_url = await generate_image(image_prompt.strip())    #   Mit dem Bildprompt wird √ºber Dall-e ein Bild generiert
                    embed = discord.Embed() #   Discord-Einbettung
                    embed.set_image(url=img_url)    #   Bild wird eingef√ºgt
                    await message.channel.send(embed=embed) #   Nachricht wird abgesendet
                #   Fehlerbehandlung bei der Bildgenerierung
                except Exception as e:
                    logger.error(f"Bildfehler: {e}")
                    await message.channel.send(f"Fehler beim Erstellen eines Bildes: {e}")

        #   Teile die Bot-Antwort in maximal 5 Antworten auf
        for para in paragraphs[:5]:
            if len(para) > 2000:
                #   Teilantworten d√ºrfen maximal 2000 Zeichen haben, sonst werden sie aufgeteilt
                for chunk in split_message(para):
                    await message.channel.send(chunk)
            else:
                await message.channel.send(para)

    #   Fehlerbehandlung f√ºr alle anderen Probleme bei der Verarbeitung
    except Exception as e:
        logger.error(f"Fehler: {e}")
        await loading_msg.delete()
        await message.channel.send("Es ist ein Fehler aufgetreten üòï")

client.run(DISCORD_BOT_TOKEN)